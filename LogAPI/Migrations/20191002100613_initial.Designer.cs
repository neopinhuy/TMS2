// <auto-generated />
using System;
using LogAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LogAPI.Migrations
{
    [DbContext(typeof(FMS))]
    [Migration("20191002100613_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LogAPI.Models.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("AssembledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("MaintenancePeriod");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price");

                    b.Property<int?>("TruckId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("TruckId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VendorId");

                    b.ToTable("Accessory");
                });

            modelBuilder.Entity("LogAPI.Models.CommodityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CommodityType");
                });

            modelBuilder.Entity("LogAPI.Models.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("ContainerTypeId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreightStateId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMaintaining");

                    b.Property<TimeSpan>("MaintenancePeriod");

                    b.Property<DateTime>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("FreightStateId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VendorId");

                    b.ToTable("Container");
                });

            modelBuilder.Entity("LogAPI.Models.ContainerMaintenance", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("AccountableUserId");

                    b.Property<bool>("Active");

                    b.Property<double>("AdvancedPaid");

                    b.Property<int>("ContainerId");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Paid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId");

                    b.Property<double>("Total");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.ToTable("ContainerMaintenance");
                });

            modelBuilder.Entity("LogAPI.Models.ContainerMonitorConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AssigneeId");

                    b.Property<int>("ContainerId");

                    b.Property<int?>("GroupRoleId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("GroupRoleId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ContainerMonitorConfig");
                });

            modelBuilder.Entity("LogAPI.Models.ContainerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ContainerType");
                });

            modelBuilder.Entity("LogAPI.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<double>("Allowance");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Details");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Salary");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("LogAPI.Models.Coordination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("ContainerId");

                    b.Property<double>("Distance");

                    b.Property<int>("DriverId");

                    b.Property<int>("FreightStateId");

                    b.Property<int>("FromId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderDetailId");

                    b.Property<int>("ToId");

                    b.Property<int>("TruckId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("FreightStateId");

                    b.HasIndex("FromId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("ToId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Coordination");
                });

            modelBuilder.Entity("LogAPI.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000);

                    b.Property<int?>("CustomerGroupId");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NationalityId");

                    b.Property<string>("Passport")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerGroupId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("NationalityId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("LogAPI.Models.CustomerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CustomerGroup");
                });

            modelBuilder.Entity("LogAPI.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaderId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("LeaderId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("LogAPI.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("LogAPI.Models.FreightBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CoordinationId");

                    b.Property<double>("Credit");

                    b.Property<string>("Curency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double>("Debit");

                    b.Property<string>("Entity")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ObjectiveId");

                    b.Property<int?>("RefferenceId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoordinationId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FreightBalance");
                });

            modelBuilder.Entity("LogAPI.Models.FreightHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CoordinatorId");

                    b.Property<int>("FreightStateId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Lat");

                    b.Property<double>("Long");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("FreightStateId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FreightHistory");
                });

            modelBuilder.Entity("LogAPI.Models.FreightProof", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<int>("FreightHistoryId");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FreightHistoryId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FreightProof");
                });

            modelBuilder.Entity("LogAPI.Models.FreightState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("FreightState");
                });

            modelBuilder.Entity("LogAPI.Models.GroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("GroupRole");
                });

            modelBuilder.Entity("LogAPI.Models.MaintenanceTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessaryId");

                    b.Property<bool>("Active");

                    b.Property<int?>("AssigneeId");

                    b.Property<int?>("ContainerId");

                    b.Property<int?>("GroupRoleId");

                    b.Property<bool>("HasAction");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId");

                    b.Property<int>("TicketStateId");

                    b.Property<int?>("TruckId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccessaryId");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("GroupRoleId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("TicketStateId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("MaintenanceTicket");
                });

            modelBuilder.Entity("LogAPI.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("LogAPI.Models.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Objective");
                });

            modelBuilder.Entity("LogAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(200);

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContactPassport")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContactSSN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CustomerId");

                    b.Property<int>("FromId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToId");

                    b.Property<int?>("TotalContainer");

                    b.Property<double>("TotalPrice");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("ToId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("LogAPI.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CommodityTypeId");

                    b.Property<int?>("ContainerTypeId");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsContainer");

                    b.Property<int>("OrderId");

                    b.Property<double>("Price");

                    b.Property<int?>("QuotationId");

                    b.Property<int?>("TimeboxId");

                    b.Property<int?>("TotalContainer");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId");

                    b.Property<double?>("Volume");

                    b.Property<double?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CommodityTypeId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("OrderId");

                    b.HasIndex("TimeboxId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VendorId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("LogAPI.Models.PaymentApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AdvancePaymentId");

                    b.Property<int>("ApproverId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentApproval");
                });

            modelBuilder.Entity("LogAPI.Models.PaymentApprovalConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("GroupRoleId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MaxApproval");

                    b.Property<int?>("RoleId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupRoleId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentApprovalConfig");
                });

            modelBuilder.Entity("LogAPI.Models.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CommodityTypeId");

                    b.Property<int?>("ContainerTypeId");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CustomerGroupId");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsContainer");

                    b.Property<double>("Price");

                    b.Property<int?>("TimeboxId");

                    b.Property<int>("ToId");

                    b.Property<int?>("TotalContainer");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId");

                    b.Property<int?>("VolumeRangeId");

                    b.Property<int?>("WeightRangeId");

                    b.HasKey("Id");

                    b.HasIndex("CommodityTypeId");

                    b.HasIndex("ContainerTypeId");

                    b.HasIndex("CustomerGroupId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("TimeboxId");

                    b.HasIndex("ToId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VendorId");

                    b.HasIndex("VolumeRangeId");

                    b.HasIndex("WeightRangeId");

                    b.ToTable("Quotation");
                });

            modelBuilder.Entity("LogAPI.Models.RightByGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanRead");

                    b.Property<bool>("CanWrite");

                    b.Property<int>("FeatureId");

                    b.Property<int>("GroupId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RightByGroup");
                });

            modelBuilder.Entity("LogAPI.Models.RightByRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanRead");

                    b.Property<bool>("CanWrite");

                    b.Property<int>("FeatureId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RightByRole");
                });

            modelBuilder.Entity("LogAPI.Models.RightByUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanRead");

                    b.Property<bool>("CanWrite");

                    b.Property<int>("FeatureId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("RightByUser");
                });

            modelBuilder.Entity("LogAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<int?>("GroupId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("LogAPI.Models.Surcharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderDetailId");

                    b.Property<double>("Price");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Surcharge");
                });

            modelBuilder.Entity("LogAPI.Models.Terminal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Lat");

                    b.Property<double>("Long");

                    b.Property<int>("NationalityId");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("NationalityId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Terminal");
                });

            modelBuilder.Entity("LogAPI.Models.TicketState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TicketState");
                });

            modelBuilder.Entity("LogAPI.Models.Timebox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("TimeboxEnd");

                    b.Property<TimeSpan>("TimeboxStart");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Timebox");
                });

            modelBuilder.Entity("LogAPI.Models.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BoughtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("DriverId");

                    b.Property<DateTime>("ExpiredDate")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int>("FreightStateId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Lat");

                    b.Property<double?>("Long");

                    b.Property<DateTime?>("MaintenanceEnd")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("MaintenancePeriod");

                    b.Property<DateTime?>("MaintenanceStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price");

                    b.Property<string>("TruckPlate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FreightStateId");

                    b.ToTable("Truck");
                });

            modelBuilder.Entity("LogAPI.Models.TruckMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountableUserId");

                    b.Property<bool>("Active");

                    b.Property<double>("AdvancedPaid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Paid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId");

                    b.Property<double>("Total");

                    b.Property<int?>("TruckId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AccountableUserId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("TicketId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("VendorId");

                    b.ToTable("TruckMaintenance");
                });

            modelBuilder.Entity("LogAPI.Models.TruckMaintenanceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessaryId");

                    b.Property<bool>("Active");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaintenanceId");

                    b.Property<double>("Price");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccessaryId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TruckMaintenanceDetail");
                });

            modelBuilder.Entity("LogAPI.Models.TruckMonitorConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessaryId");

                    b.Property<bool>("Active");

                    b.Property<int?>("GroupRoleId");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RoleId");

                    b.Property<int>("TruckId");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccessaryId");

                    b.HasIndex("GroupRoleId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("TruckId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("TruckMonitorConfig");
                });

            modelBuilder.Entity("LogAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<int>("DepartmentId");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NationalityId");

                    b.Property<string>("Passport")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RoleId");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("NationalityId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LogAPI.Models.UserBalance", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<int?>("CoordinatorId");

                    b.Property<double?>("Credit");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Debit");

                    b.Property<int>("HasInvoice");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceImage")
                        .HasMaxLength(1000);

                    b.Property<int>("PaymentObjectiveId");

                    b.Property<bool>("ShouldCountToSalary");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("PaymentObjectiveId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("UserBalance");
                });

            modelBuilder.Entity("LogAPI.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Address2")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorTypeId");

                    b.HasKey("Id");

                    b.HasIndex("VendorTypeId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("LogAPI.Models.VendorType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("VendorType");
                });

            modelBuilder.Entity("LogAPI.Models.VolumeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("VolumeEnd");

                    b.Property<double>("VolumeStart");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("VolumeRange");
                });

            modelBuilder.Entity("LogAPI.Models.WeightRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("InsertedBy");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("WeightEnd");

                    b.Property<double>("WeightStart");

                    b.HasKey("Id");

                    b.HasIndex("InsertedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("WeightRange");
                });

            modelBuilder.Entity("LogAPI.Models.Accessory", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedAccessory")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Truck", "Truck")
                        .WithMany("Accessory")
                        .HasForeignKey("TruckId");

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedAccessory")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.Vendor", "Vendor")
                        .WithMany("Accessory")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.CommodityType", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedCommodityType")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedCommodityType")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Container", b =>
                {
                    b.HasOne("LogAPI.Models.FreightState", "FreightState")
                        .WithMany("Container")
                        .HasForeignKey("FreightStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedContainer")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedContainer")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.Vendor", "Vendor")
                        .WithMany("Container")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.ContainerMonitorConfig", b =>
                {
                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("AssignedContainerMonitorConfig")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("LogAPI.Models.Container", "Container")
                        .WithMany("ContainerMonitorConfig")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.GroupRole", "GroupRole")
                        .WithMany("ContainerMonitorConfig")
                        .HasForeignKey("GroupRoleId");

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedContainerMonitorConfig")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Role", "Role")
                        .WithMany("ContainerMonitorConfig")
                        .HasForeignKey("RoleId");

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedContainerMonitorConfig")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.ContainerType", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedContainerType")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedContainerType")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Contract", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedContract")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedContract")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("Contract")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("LogAPI.Models.Coordination", b =>
                {
                    b.HasOne("LogAPI.Models.Container", "Container")
                        .WithMany("Coordination")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "Driver")
                        .WithMany("Coordination")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.FreightState", "FreightState")
                        .WithMany("Coordination")
                        .HasForeignKey("FreightStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Terminal", "FromTerminal")
                        .WithMany("CoordinationFromTerminal")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedCoordination")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.OrderDetail", "OrderDetail")
                        .WithMany("Coordination")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Terminal", "ToTerminal")
                        .WithMany("CoordinationToTerminal")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Truck", "Truck")
                        .WithMany("Coordination")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedCoordination")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Customer", b =>
                {
                    b.HasOne("LogAPI.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("Customer")
                        .HasForeignKey("CustomerGroupId");

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedCustomer")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Nationality", "Nationality")
                        .WithMany("Customer")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedCustomer")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Department", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedDepartment")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "Leader")
                        .WithMany("Department")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UpdatedDepartment")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Feature", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("InsertedFeature")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.FreightBalance", b =>
                {
                    b.HasOne("LogAPI.Models.Coordination", "Coordination")
                        .WithMany("FreightBalance")
                        .HasForeignKey("CoordinationId");

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("FreightBalance")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Objective", "Objective")
                        .WithMany("FreightBalance")
                        .HasForeignKey("ObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("FreightBalance1")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.FreightHistory", b =>
                {
                    b.HasOne("LogAPI.Models.Coordination", "Coordination")
                        .WithMany("FreightHistory")
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.FreightState", "FreightState")
                        .WithMany("FreightHistory")
                        .HasForeignKey("FreightStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("FreightHistory")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("FreightHistory1")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.FreightProof", b =>
                {
                    b.HasOne("LogAPI.Models.FreightHistory", "FreightHistory")
                        .WithMany("FreightProof")
                        .HasForeignKey("FreightHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("FreightProof")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("FreightProof1")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.FreightState", b =>
                {
                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("FreightState")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("FreightState1")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.GroupRole", b =>
                {
                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("GroupRole")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("GroupRole1")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.MaintenanceTicket", b =>
                {
                    b.HasOne("LogAPI.Models.Accessory", "Accessory")
                        .WithMany("MaintenanceTicket")
                        .HasForeignKey("AccessaryId");

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("MaintenanceTicket")
                        .HasForeignKey("AssigneeId");

                    b.HasOne("LogAPI.Models.Container", "Container")
                        .WithMany("MaintenanceTicket")
                        .HasForeignKey("ContainerId");

                    b.HasOne("LogAPI.Models.GroupRole", "GroupRole")
                        .WithMany("MaintenanceTicket")
                        .HasForeignKey("GroupRoleId");

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("MaintenanceTicket1")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Role", "Role")
                        .WithMany("MaintenanceTicket")
                        .HasForeignKey("RoleId");

                    b.HasOne("LogAPI.Models.TicketState", "TicketState")
                        .WithMany("MaintenanceTicket")
                        .HasForeignKey("TicketStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Truck", "Truck")
                        .WithMany("MaintenanceTicket")
                        .HasForeignKey("TruckId");

                    b.HasOne("LogAPI.Models.User", "User2")
                        .WithMany("MaintenanceTicket2")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Nationality", b =>
                {
                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("NationalityInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("NationalityUpdatedBy")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("LogAPI.Models.Order", b =>
                {
                    b.HasOne("LogAPI.Models.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Terminal", "FromTerminal")
                        .WithMany("OrderFromTerminal")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Terminal", "ToTerminal")
                        .WithMany("OrderToTerminal")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("Order1")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.OrderDetail", b =>
                {
                    b.HasOne("LogAPI.Models.CommodityType", "CommodityType")
                        .WithMany("OrderDetail")
                        .HasForeignKey("CommodityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("OrderDetail")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Timebox", "Timebox")
                        .WithMany("OrderDetail")
                        .HasForeignKey("TimeboxId");

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("OrderDetail1")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.Vendor", "Vendor")
                        .WithMany("OrderDetail")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("LogAPI.Models.PaymentApprovalConfig", b =>
                {
                    b.HasOne("LogAPI.Models.GroupRole", "GroupRole")
                        .WithMany("PaymentApprovalConfig")
                        .HasForeignKey("GroupRoleId");

                    b.HasOne("LogAPI.Models.User", "User1")
                        .WithMany("PaymentApprovalConfig1")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Role", "Role")
                        .WithMany("PaymentApprovalConfig")
                        .HasForeignKey("RoleId");

                    b.HasOne("LogAPI.Models.User", "User2")
                        .WithMany("PaymentApprovalConfig2")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("PaymentApprovalConfig")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LogAPI.Models.Quotation", b =>
                {
                    b.HasOne("LogAPI.Models.CommodityType", "CommodityType")
                        .WithMany("Quotation")
                        .HasForeignKey("CommodityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.ContainerType", "ContainerType")
                        .WithMany("Quotation")
                        .HasForeignKey("ContainerTypeId");

                    b.HasOne("LogAPI.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("Quotation")
                        .HasForeignKey("CustomerGroupId");

                    b.HasOne("LogAPI.Models.Customer", "Customer")
                        .WithMany("Quotation")
                        .HasForeignKey("CustomerId");

                    b.HasOne("LogAPI.Models.Terminal", "FromTerminal")
                        .WithMany("QuotationFromTerminal")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("QuotationInsertdBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Timebox", "Timebox")
                        .WithMany("Quotation")
                        .HasForeignKey("TimeboxId");

                    b.HasOne("LogAPI.Models.Terminal", "ToTerminal")
                        .WithMany("QuotationToTerminal")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("QuotationUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.Vendor", "Vendor")
                        .WithMany("Quotation")
                        .HasForeignKey("VendorId");

                    b.HasOne("LogAPI.Models.VolumeRange", "VolumeRange")
                        .WithMany("Quotation")
                        .HasForeignKey("VolumeRangeId");

                    b.HasOne("LogAPI.Models.WeightRange", "WeightRange")
                        .WithMany("Quotation")
                        .HasForeignKey("WeightRangeId");
                });

            modelBuilder.Entity("LogAPI.Models.RightByGroup", b =>
                {
                    b.HasOne("LogAPI.Models.Feature", "Feature")
                        .WithMany("RightByGroup")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("RightByGroupInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("RightByGroupUpdated")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.RightByRole", b =>
                {
                    b.HasOne("LogAPI.Models.Feature", "Feature")
                        .WithMany("RightByRole")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("RightByRoleInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Role", "Role")
                        .WithMany("RightByRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("RightByRoleUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.RightByUser", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("RightByUserInserted")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("RightByUserUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.User", "UserRight")
                        .WithMany("UserRight")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.Surcharge", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("SurchargeInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.OrderDetail", "OrderDetail")
                        .WithMany("Surcharge")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UpdatedUser")
                        .WithMany("SurchargeUpdated")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Terminal", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("TerminalInserted")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Nationality", "Nationality")
                        .WithMany("Terminal")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("TerminalUpdated")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.TicketState", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("TicketStateInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("TicketStateUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Timebox", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("TimeboxInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("TimeboxUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.Truck", b =>
                {
                    b.HasOne("LogAPI.Models.FreightState", "FreightState")
                        .WithMany("Truck")
                        .HasForeignKey("FreightStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.TruckMaintenance", b =>
                {
                    b.HasOne("LogAPI.Models.User", "AccoutableUser")
                        .WithMany("TruckMaintenanceAccountable")
                        .HasForeignKey("AccountableUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("TruckMaintenanceInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.MaintenanceTicket", "MaintenanceTicket")
                        .WithMany("TruckMaintenance")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Truck", "Truck")
                        .WithMany("TruckMaintenance")
                        .HasForeignKey("TruckId");

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("TruckMaintenanceUpdatedBY")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.Vendor", "Vendor")
                        .WithMany("TruckMaintenance")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.TruckMaintenanceDetail", b =>
                {
                    b.HasOne("LogAPI.Models.Accessory", "Accessory")
                        .WithMany("TruckMaintenanceDetail")
                        .HasForeignKey("AccessaryId");

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("TruckMaintenanceDetailInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.TruckMaintenance", "TruckMaintenance")
                        .WithMany("TruckMaintenanceDetail")
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("TruckMaintenanceDetailUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.TruckMonitorConfig", b =>
                {
                    b.HasOne("LogAPI.Models.Accessory", "Accessory")
                        .WithMany("TruckMonitorConfig")
                        .HasForeignKey("AccessaryId");

                    b.HasOne("LogAPI.Models.GroupRole", "GroupRole")
                        .WithMany("TruckMonitorConfig")
                        .HasForeignKey("GroupRoleId");

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("TruckMonitorConfigInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Role", "Role")
                        .WithMany("TruckMonitorConfig")
                        .HasForeignKey("RoleId");

                    b.HasOne("LogAPI.Models.Truck", "Truck")
                        .WithMany("TruckMonitorConfig")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UseUpdated")
                        .WithMany("TruckMonitorConfigUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("TruckMonitorConfig")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("LogAPI.Models.User", b =>
                {
                    b.HasOne("LogAPI.Models.Department", "Department3")
                        .WithMany("User3")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("UserInsertedBy")
                        .HasForeignKey("InsertedBy");

                    b.HasOne("LogAPI.Models.Nationality")
                        .WithMany("User2")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UserUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.UserBalance", b =>
                {
                    b.HasOne("LogAPI.Models.Coordination", "Coordination")
                        .WithMany("UserBalance")
                        .HasForeignKey("CoordinatorId");

                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("UserBalanceInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.Objective", "Objective")
                        .WithMany("UserBalance")
                        .HasForeignKey("PaymentObjectiveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("UserBalanceUpdatedBy")
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("LogAPI.Models.User", "User")
                        .WithMany("UserBalance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.Vendor", b =>
                {
                    b.HasOne("LogAPI.Models.VendorType", "VendorType")
                        .WithMany("Vendor")
                        .HasForeignKey("VendorTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LogAPI.Models.VendorType", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("VendorTypeInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("VendorTypeUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.VolumeRange", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("VolumeRangeInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("VolumeRangeUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("LogAPI.Models.WeightRange", b =>
                {
                    b.HasOne("LogAPI.Models.User", "UserInserted")
                        .WithMany("WeightRangeInsertedBy")
                        .HasForeignKey("InsertedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LogAPI.Models.User", "UserUpdated")
                        .WithMany("WeightRangeUpdatedBy")
                        .HasForeignKey("UpdatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
